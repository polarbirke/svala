@use 'sass:map';
@use "sass:meta";

@use 'config/default-options' as default_options;
@use 'config/default-helpers' as *;

@use 'helpers/breakpoint-transformer' as *;
@use 'helpers/checks' as *;
@use 'helpers/pre-and-postfix-transformers' as *;
@use 'helpers/list-to-map' as *;

@use 'tools/generate-classes' as *;

// This needs to be defined with `!default` to be overridable with local options in projects, e.g.
// @use 'svala/scss/generator' as svala with ($svala-options: svala-config.$svala-options);
$svala-options: default_options.$svala-options !default;

@mixin generator($config) {
    $breakpoints: map.get($svala-options, 'breakpoints');
    $media-features: map.get($svala-options, 'media-features');
    $breakpoint-modifier-divider: map.get($svala-options, 'breakpoint-modifier-divider');

    // Set up a few guards with errors and warnings or fixes
    // ----------------------------------------------------------------------------------------
    @if $breakpoints and not is-map($breakpoints) {
        $type: meta.type-of($breakpoints);

        @error "'breakpoints' is of type #{$type} but must be a map.";
    }

    @if $breakpoints and $media-features and not is-map($media-features) {

        @if not is-list($media-features) {
            $type: meta.type-of($media-features);

            @error "'media-features' is of type #{$type} but must be a list or a map (if map, the features need to be the values).";
        } @else {
            $media-features: getMapFromList($media-features);
        }

    }

    @each $token, $token-map in $config {
        $prefix: getPrefix($token-map, $svala-options);
        $postfix: getPostfix($token-map, $svala-options);
        $property: map.get($token-map, 'property');
        $selector: $token;
        $value: map.get($token-map, 'value');
        $values: map.get($token-map, 'values') or null;
        $axes: map.get($token-map, 'axes') or map.get($token-map, 'axis') or null;
        $axes-shorthand: map.get($token-map, 'axes-shorthand') or map.get($token-map, 'axis-shorthand') or false;
        $states: map.get($token-map, 'states') or null;
        $responsive: map.get($token-map, 'responsive') or false;
        $important: map.get($token-map, 'important') or false;

        @include generate-classes(
            $svala-options: $svala-options,
            $property: $property,
            $selector: $selector,
            $value: $value,
            $values: $values,
            $axes: $axes,
            $axes-shorthand: $axes-shorthand,
            $states: $states,
            $prefix: $prefix,
            $postfix: $postfix,
            $important: $important
        );

        @if ($responsive) {
            @if not $breakpoints {
                @warn 'Cannot generate responsive utility classes without breakpoints. Please set "breakpoints" in $svala-options.'
            }

            $refinedBreakpoints: getRefinedBreakpoints($breakpoints, $media-features);

            @each $breakpoint-modifier, $breakpoint in $refinedBreakpoints {
                @if (map.get($svala-options, 'responsive-mode') == 'trailing') {
                    $postfix: #{getPostfix($token-map, $svala-options) + $breakpoint-modifier-divider + $breakpoint-modifier};
                } @else if (map.get($svala-options, 'responsive-mode') == 'leading') {
                    $prefix: #{$breakpoint-modifier + $breakpoint-modifier-divider + getPrefix($token-map, $svala-options)};
                }

                @media #{$breakpoint} {
                    @include generate-classes(
                        $svala-options: $svala-options,
                        $property: $property,
                        $selector: $selector,
                        $value: $value,
                        $values: $values,
                        $axes: $axes,
                        $axes-shorthand: $axes-shorthand,
                        $states: $states,
                        $prefix: $prefix,
                        $postfix: $postfix,
                        $important: $important
                    );
                }
            }
        }
    }
}
